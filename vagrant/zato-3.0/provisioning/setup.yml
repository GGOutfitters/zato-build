---
# You can add users to the docker group to allow them to manage docker
# containers. This playbook uses sudo rather than the vagrant user because
# Ansible uses ControlPersist for SSH connections. The first time this playbook
# runs, the docker commands would fail if run by the vagrant user, since the
# persisted connection state isn't aware of the addition of the 'docker' group.

- name: General | Package Installation.
  apt: name={{ item }} state=present
  become: yes
  register: apt_res
  retries: 5
  until: apt_res is success
  loop:
    - python-pip
    - git
    - apt-transport-https
    - curl
    - htop
    - libcurl4-openssl-dev
    - mc
    - redis-server
    - software-properties-common
    - ssh
    - sudo
    - supervisor
    - vim
    - tzdata
    - postgresql
    - postgresql-contrib
    - postgresql-client
    - python-psycopg2

- name: General | Add repository universe.
  command: add-apt-repository universe

# - name: General | Initiate database
#   command: initdb
#            creates=/var/lib/pgsql/data/postgresql.conf

- name: General | Start PostgreSQL and enable at boot
  service: name=postgresql
          enabled=yes
          state=started

- name: General | Ensure PostgreSQL is listening on all localhost
  lineinfile: dest=/etc/postgresql/10/main/postgresql.conf
     regexp='^#?listen_addresses\s*='
     line="listen_addresses = '127.0.0.1'"
     state=present
  notify: restart postgresql

- name: Zato | Add Zato's Apt signing key
  apt_key:
    url: https://zato.io/repo/zato-0CBD7F72.pgp.asc
    state: present
  register: task_result
  until: task_result is succeeded
  retries: 10
  delay: 5

- name: Zato | Add Zato repository.
  apt_repository:
    repo: deb https://zato.io/repo/stable/3.0/ubuntu bionic main
    state: present
    filename: zato
  register: task_result
  until: task_result is succeeded
  retries: 10
  delay: 5

- name: Zato | Zato package installation.
  apt: name=zato state=present
  become: yes
  register: apt_res
  retries: 5
  until: apt_res is success

- name: Start service redis, if not started
  service:
    name: redis-server
    state: started

- name: Start service postgresql, if not started
  service:
    name: postgresql
    state: started

- name: Zato | Copying Zato's quickstart script
  copy:
    src: provisioning/quickstart-bootstrap.sh
    dest: /opt/zato/quickstart-bootstrap.sh
    mode: 0755

- name: Zato | Zato's global configuration
  shell: |
    cd /opt/zato/
    for i in update_password.config zato_start_load_balancer zato_start_scheduler zato_start_server1 zato_start_server2 zato_start_web_admin;do
      [[ -f $i ]] || wget -t 0 -T 10 -w 2 https://raw.githubusercontent.com/zatosource/zato-build/master/docker/quickstart/$i
    done
    chmod 755 \
      /opt/zato/zato_start_load_balancer \
      /opt/zato/zato_start_server1 \
      /opt/zato/zato_start_server2 \
      /opt/zato/zato_start_web_admin \
      /opt/zato/zato_start_scheduler || exit 1

    echo "{{zato_web_admin_password}}" > /opt/zato/web_admin_password
    echo "password={{zato_web_admin_password}}" >> /opt/zato/update_password.config

    chown zato. /opt/zato/update_password.config || exit 1

    if [[ ! -d /opt/zato/env/qs-1 ]];then
      mkdir -p /opt/zato/env/qs-1 || exit 1
      chown zato. /opt/zato/env/qs-1 || exit 1
    fi

    su zato -c /opt/zato/quickstart-bootstrap.sh 2>&1 | tee /tmp/quickstart-bootstrap.log || exit 1

    exit 0
  args:
    executable: /bin/bash
  register: quickstart

- name: DISPLAY THE OUTPUT
  debug: msg={{ quickstart.stdout_lines | to_nice_json(indent=2) }}

- name: Zato | Copying Zato's supervisord config
  copy:
    src: provisioning/supervisord.conf
    dest: /etc/supervisor/conf.d/zato.conf
    mode: 0644
  notify: restart supervisor
